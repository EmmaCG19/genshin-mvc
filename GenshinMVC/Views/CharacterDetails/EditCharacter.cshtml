@model GenshinMVC.Models.CharacterVM
@using GenshinLibrary

@{
    ViewBag.Title = "Edit Character";
    Layout = "~/Views/Shared/_Layout.cshtml";
    var imgURL = "https://rerollcdn.com/GENSHIN/Characters/";

}

<main class="content">
    <h2 class="row">
        @{
            string textColor;

            switch (Model.Vision)
            {
                case Vision.Anemo:
                    textColor = "text-anemo";
                    break;
                case Vision.Pyro:
                    textColor = "text-pyro";
                    break;
                case Vision.Hydro:
                    textColor = "text-hydro";
                    break;
                case Vision.Dendro:
                    textColor = "text-dendro";
                    break;
                case Vision.Cryo:
                    textColor = "text-cryo";
                    break;
                case Vision.Geo:
                    textColor = "text-geo";
                    break;
                default:
                    textColor = "text-other";
                    break;
            }

        }

        <span class="@textColor">@Model.Name</span>
    </h2>
    @using (Html.BeginForm("Edit", "CharacterDetails", FormMethod.Post))
    {

        @Html.AntiForgeryToken()

        <section class="row justify-content-around">
            <div class="col-12 col-md-4 p-2">
                <div class="form-group">
                    @Html.LabelFor(model => model.Name)
                    @Html.TextBoxFor(model => model.Name, htmlAttributes: new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.Name, "", htmlAttributes: new { @class = "text-danger" })
                </div>
                <div class="form-group">
                    @Html.LabelFor(model => model.Vision)
                    @Html.DropDownListFor(model => model.Vision, new SelectList(Enum.GetValues(typeof(Vision))), "--Select Vision--", htmlAttributes: new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.Vision, "", htmlAttributes: new { @class = "text-danger" })
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.Weapon)
                    @Html.DropDownListFor(model => model.Weapon, new SelectList(Enum.GetValues(typeof(WeaponType))), "--Select Weapon--", htmlAttributes: new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.Weapon, "", htmlAttributes: new { @class = "text-danger" })
                </div>
                <div class="form-group">
                    @Html.LabelFor(model => model.Region)
                    @Html.DropDownListFor(model => model.Region, new SelectList(Enum.GetValues(typeof(Region))), "--Select Region--", htmlAttributes: new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.Region, "", htmlAttributes: new { @class = "text-danger" })

                </div>
                <div>
                    @Html.ValidationSummary(true, "", htmlAttributes: new { @class = "text-danger" })
                </div>
            </div>
            <div class="col-12 col-md-6 d-flex justify-content-center align-items-center">
                <div class="form-group text-center pt-2">
                    <img class="img-thumbnail mb-3" src=@String.Concat(imgURL, Model.Name,".png") alt="@Model.Name" />
                    <input class="form-control-file"
                           type="file"
                           name="characterIcon"
                           id="characterIcon" />
                </div>
            </div>
            <div class="p-2 w-100 text-right">
                <button class="btn btn-primary btn-update"
                        type="submit"
                        name="btnUpdate"
                        id="btnUpdate">
                    Update
                </button>
            </div>
        </section>

    }
</main>
